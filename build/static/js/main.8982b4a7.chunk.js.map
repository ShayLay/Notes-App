{"version":3,"sources":["components/Note.js","services/notes.js","components/error.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","className","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","setTimeout","key","bind","onSubmit","event","preventDefault","target","date","Date","toString","Math","random","concat","value","onChange","type","ReactDOM","render","document","getElementById"],"mappings":"kOAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAsB,iBAC1B,OACE,gCAAMH,EAAKI,QACX,4BAAQC,QAASJ,GAAjB,IAAqCC,EAArC,OCNEI,EAAU,kCAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCE5BK,G,MAdM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACrB,OAAgB,OAAZA,EACK,KAIP,yBAAKC,UAAU,SACZD,KCiGQE,EApGH,SAACC,GAAW,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAESF,mBAAS,iBAFlB,mBAEdG,EAFc,KAELC,EAFK,OAGSJ,oBAAS,GAHlB,mBAGdK,EAHc,KAGLC,EAHK,OAImBN,mBAAS,0BAJ5B,mBAIdO,EAJc,KAIAC,EAJA,KAOrBC,qBAAW,WACTC,IAEKtB,MAAK,SAAAuB,GACNT,EAASS,QAEZ,IAEHC,QAAQC,IAAI,SAAUZ,EAAMa,OAAQ,SAGpC,IAAMC,EAAcV,EAASJ,EAAQA,EAAMe,QAAO,SAAArC,GAAI,OAAuB,IAAnBA,EAAKG,aA4B1DmC,EAAqB,SAACxB,GAC1B,IAAMd,EAAOsB,EAAMiB,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,IAAMA,KAC/B2B,EAAW,2BAAQzC,GAAR,IAAcG,WAAYH,EAAKG,YAEhD4B,EACWjB,EAAI2B,GACThC,MAAK,SAAAiC,GACNnB,EAASD,EAAMqB,KAAI,SAAA3C,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAO0C,SAEpDE,OAAM,SAAAC,GACLhB,EAAgB,QAAD,OACL7B,EAAKI,QADA,yCAGf0C,YAAW,WACTjB,EAAgB,QACf,KACHN,EAASD,EAAMe,QAAO,SAAAG,GAAC,OAAIA,EAAE1B,KAAOA,SAIzCmB,QAAQC,IAAI,gBAAkBpB,EAAK,wBAMtC,OACI,6BACE,qCACA,kBAAC,EAAD,CAAcG,QAASW,IACvB,6BACA,4BAAQvB,QAAS,kBAAMsB,GAAYD,KAAnC,QACMA,EAAU,YAAc,QAK9B,4BACGU,EAAYO,KAAI,SAAA3C,GAAI,OACnB,kBAAC,EAAD,CAAM+C,IAAK/C,EAAKc,GAAId,KAAMA,EAAMC,iBAAkBqC,EAAmBU,U,EAAUhD,EAAKc,UAIxF,0BAAMmC,SArEM,SAACC,GACfA,EAAMC,iBACNlB,QAAQC,IAAI,iBAAkBgB,EAAME,QAEpC,IAAMxC,EAAY,CAChBR,QAASoB,EACT6B,MAAM,IAAIC,MAAOC,WACjBpD,UAAWqD,KAAKC,SAAW,GAI7B1B,EACUnB,GACLH,MAAK,SAAAiC,GACNnB,EAASD,EAAMoC,OAAOhB,IACtBjB,EAAW,SAuDX,2BAAOkC,MAAOnC,EACdoC,SApDmB,SAACV,GACxBjB,QAAQC,IAAIgB,EAAME,OAAOO,OACzBlC,EAAWyB,EAAME,OAAOO,UAoDpB,4BAAQE,KAAK,UAAb,aC5FRC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.8982b4a7.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important': 'make important'\n  return (\n    <li> {note.content}\n    <button onClick={toggleImportance}> {label} </button>\n\n    </li>\n  )\n}\n\nexport default Note\n","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default {getAll,create,update}\n","import React from 'react'\n\n\nconst Notification = ({message}) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n\n    </div>\n  )\n}\n\n\nexport default Notification\n","import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport Note from './components/Note.js'\nimport noteService from './services/notes.js'\nimport './index.css'\nimport Notification from './components/error.js'\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('a new note...')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n\n  useEffect( () => {\n    noteService\n      .getAll()\n        .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  console.log('render', notes.length, 'notes')\n\n\n  const notesToShow = showAll? notes : notes.filter(note => note.important === true)\n\n  const addNote = (event) => {\n    event.preventDefault()\n    console.log('button clicked', event.target)\n\n    const newObject = {\n      content: newNote,\n      date: new Date().toString(),\n      important: Math.random() < 5,\n\n    }\n\n    noteService\n      .create(newObject)\n        .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n\n  }\n\n\n const toggleImportanceOf = (id) => {\n   const note = notes.find(n => n.id == id)\n   const changedNote = { ...note, important: !note.important}\n\n   noteService\n      .update(id, changedNote)\n        .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note ${note.content} was already removed from the server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n\n\n   console.log('importance of' + id + 'needs to be toggled')\n }\n\n\n\n\nreturn (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage}/>\n      <div>\n      <button onClick={() => setShowAll(!showAll)}>\n      show {showAll ? 'important' : 'all'}\n      </button>\n\n      </div>\n\n      <ul>\n        {notesToShow.map(note =>\n          <Note key={note.id} note={note} toggleImportance={toggleImportanceOf.bind(this,note.id)} />\n        )}\n      </ul>\n\n      <form onSubmit={addNote}>\n        <input value={newNote}\n        onChange={handleNoteChange}\n        />\n        <button type=\"submit\"> save </button>\n      </form>\n\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\n\n\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}